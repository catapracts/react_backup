09:34

Strider, Cyclops, Spare, Mage, Golem, Osea, Erusia
Trigger, Count, Wiseman, Lanza, Clown, SOL, Full Band, Champ, Tabloid, Knocker, Bandog,
F-22 Raptor, F-15 Eagle, F-16 Fighting Falcon
Grumman F-14 Tomcat, McDonnell Douglas F/A-18 Hornet, Boeing F/A-18E/F Super Hornet
Sukhoi Su-27, Sukhoi Su-35, Sukhoi Su-57
Eurofighter Typhoon
Mikoyan MiG-29, Fairchild Republic A-10 Thunderbolt II
X02S- Strike Wyvern
ADF-11 DarkStar


ACM, Air Combat Maneuvering. - PostStall / Cobra / PowerRoof maneuver

Charge Assault / 444 / Battle of FarBanti / Light House / Dark Blue


Air Superiority Fighter - F-15 Eagle, F-22 Raptor

MultiRole Fighter - McDonnell Douglas F/A-18 Hornet, Boeing F/A-18E/F Super Hornet, Sukhoi Su-57

multirole fighter & Air superiority fighter - Sukhoi Su-27, Sukhoi Su-35,  F-16 Fighting Falcon, Mikoyan MiG-29, Eurofighter Typhoon

Interceptor & multirole fighter & Air superiority fighter - Grumman F-14 Tomcat

Close air support attack aircraft - Fairchild Republic A-10 Thunderbolt II

JSX = component

move.js = component ?

function으로 component 이름 만들고 return문 안에 있는 내용을 내보낸다. 외부에서 component 호출시
props사용시 받아올 때 중괄호 써서 받아온다. 
배열 안 객체 형태 : [{},{},{}] -> map()이용해서 객체 꺼낸다.(처음부터 끝까지) / 어디부터 어디까지 범위 조절 가능한 메소드 있다.
component 호출하면서 component의 매개변수로 들어갈 애들을 props를 통해 들어간다.
hook - 자동 rendering


============================================================================================================
10:34

JSON으로 배열안에 값들 map으로 끄집어 내서 html만들어 내면서 출력
element안의 고유값이 적용 되어야 console에서 경고창 안 뜬다.

Lab7.js
import React from 'react';
import { useState } from 'react';

function Lab7(props) {

    //useState Hook : 상태값이 변경될 때, 자동으로 Rendering
    //useState에서 사용하는 변수 : all data type - boolean, string, object, array(one of object) etc
    const [inputValue, setInputValue] = useState("");

    //input 박스의 값이 수정되면 호출하는 함수 = onChange
    //() = 수정된 값을 받는 element
    const onChangeHandler= (e) => 
    {
        console.log("Success")
        setInputValue(e.target.value)
        console.log(e.target.value)
    }

    return (
        <div>
            <h1>Lab07 - JSX에서 input form 만들고 user가 입력한 값을 form box랑 console에 출력 - 굉장히 많이 쓰는 내용</h1>
            {/* inputValue -> onChangeHandler -> setInputValue(e.target.value) -> inputValue*/}
            <input value={inputValue} onChange={onChangeHandler}/>
        </div>
    );
}

export default Lab7;



Lab8.js
import React from 'react';
import { useState } from 'react';

function Lab8(props) {

    //MOCK Data = 가짜 데이터, 프로그래밍에서 기본값 출력
    const [JetFighters, setJetFighters] = useState(['F-16 Fighting Falcon', 'F-15 Eagle', 'F-22 Raptor']);

    //상태 변경시 자동 rendering 되도록 useState 사용
    const [inputValue, setInputValue] = useState("");

    //함수 생성
    const onChangeHandler = (e) => 
    {
        setInputValue(e.target.value);
        console.log(e.target.value);
    }

    return (
        <div>
            <h1>Lab8 - button사용해서 InputBox에 넣은 값d을 받아서 tag 생성한 뒤 추가</h1>

            <input value={inputValue} onCahange={onChangeHandler}/>

            <button>ADD</button>
            
            <ul>
                {
                    JetFighters.map((JetFighter, index) =>
                    {
                        return <li key={index}>{JetFighter}</li>
                    })
                }
            </ul>
        </div>
    );
}

export default Lab8;



============================================================================================================
11:35

Lab08.js
import React from 'react';
import { useState } from 'react';

function Lab8(props) {

    //MOCK Data = 가짜 데이터, 프로그래밍에서 기본값 출력
    const [JetFighters, setJetFighters] = useState(['F-16 Fighting Falcon', 'F-15 Eagle', 'F-22 Raptor']);

    //상태 변경시 자동 rendering 되도록 useState 사용
    const [inputValue, setInputValue] = useState("");

    //함수 생성
    const onChangeHandler = (e) => {
        setInputValue(e.target.value);
        console.log(e.target.value);
    }

    //버튼 클릭시 작동 함수
    const onClickHandler = (e) => {
        // input box의 value를 setJetFighters를 사용해서 array에 value 추가 시 자동으로 rendering
        // ES6에서 새로 추가된 문법 = [...JetFighter, 추가할 값] / 기존에 push, put, shift 등 사용하다가 이번에 새로 나온 것 - 기존 배열에서 마지막에 값 추가시 사용
        setJetFighters([...JetFighters, inputValue]);

        //inputBox의 value 초기화
        setInputValue("");
    }

    return (
        <div>
            <h1>Lab8 - button사용해서 InputBox에 넣은 값d을 받아서 tag 생성한 뒤 추가</h1>

            <input value={inputValue} onChange={onChangeHandler}/>

            <button onClick={onClickHandler}>ADD</button>
            
            <ul>
                {
                    JetFighters.map((JetFighter, index) => {
                        return <li key={index}>{JetFighter}</li>
                    })
                }
            </ul>
        </div>
    );
}

export default Lab8;


component = 반복되는 code 줄이기 위해 사용
useState는 기본벅으로 그냥 import

App(Parent)
- Viewer(Child) : 출력
- Controller(Child) : App을 통해 Viewer에 전달 / Viewer에 직접 전달 불가능

============================================================================================================
12:43
상태 값 전달 시 props로 전달 / props(포함 React의 Data 이동)은 부모 -> 자식 방향으로 전달 = 자식 -> 자식 or 자식 -> 부모 안됨

// React : 상태값 전송 by props : 부모 component -> 자식 component
// React에서 대규모 사이트 개발시 component 안에 component 안에 component안에 component안에 component안에 component안에 component ... 이런 식으로 존재하는데
// component 사이 값 주고 받을 때, props 사용하는데, 최상위까지 올라간 다음 전달한다. -> React의 가장 큰 문제정 = 상태값 전달
// props : component 사이 값 전달 역할 / only : 부모 -> 자식
// component 사이 상태값 효율적 전송을 위한 SOl. ex: Redux, 몹앱스(Mob?), ContextAPI


============================================================================================================
14:34
★★★★
with props
State : Parent -> Child : Parent에서 발생한 State를 props에 담아 Child에 전달
Event : Child -> Parent : Child에서 발생한 Event를 props에 담아 Parent에 전달


============================================================================================================
15:35

Header는 props 필요 없다..?
{JavaScript 넣는 곳}
App.js
- Header.js
- ToDoEditor.js
- ToDoList.js - ToDoItem.js

ToDoEditor -> App -> ToDoList -> ToDoItem

// useState() : state 변화시 자동 Rendering
// useRef() : 특정 Element에 focus를 위치 / focus를 위치할 reference value를 넣는다. / component 초기 rendering 이후 value가 allocate된다.
// onChange : function 호출 / onKeyDown : enter키(key code value = 13)


============================================================================================================
16:35

ToDoEditor.js
import React from 'react';
import { useState, useRef } from 'react';


//onCreate를 부모 Component로 전송
function ToDoEditor({onCreate}) {

    //useDate 사용
    const [content, setContent] = useState(''); 
    
    //input box의 값 수정 시 호출
    const onChangeContent = (e) => 
    {
        setContent(e.target.value);
    }

    //component 생성(mount) 이후에 초기값이 할당
    const inputRef = useRef();


    const onKeyDown = (e) =>
    {
        //Event로 Enter가 들어왔을 때(키보드에서 Enter치면)
        if(e.keyCode === 13)
        {
            onSubmit();
        }
    }

    //input value를 Parent Component에게 전달
    const onSubmit = () => 
    {
        console.log("Transfer");
        
        //값 초기화 & Focus 위치를 해당 위치로 이동
        if(!content)
        {
            inputRef.current.focus();
            return;
        }

        //App(Parent Component)에게 onCreate()라는 props를 호출
        onCreate(content);
        setContent('');
    }

    return (
        <div>
            <h4>새로운 ToDo 작성</h4>
            <div>
                <input ref={inputRef} value={content} onChange={onChangeContent} onKeyDown={onKeyDown} placeholder='새로운 할 일 작성'/>
                <button onClick={onSubmit}>추가</button>
            </div>
        </div>
    );
}

export default ToDoEditor;




App.js
import './App.css';
import Header from './components/Header';
import ToDoItem from './components/ToDoItem';
import ToDoList from './components/ToDoList';
import ToDoEditor from './components/ToDoEditor';


function App() {

  const onCreate = (content) => 
  {
    console.log("App Component에 값이 잘 전송됨");
    console.log(content);
  }


  return (
    <div className="App">
      <Header />
      

      <ToDoEditor 
      onCreate={onCreate} //Child의 Event를 받는 props 받고 위에 명시한 onCreate함수 실행
      />

      <ToDoList />
      
      <ToDoItem />

    </div>
  );
}

export default App;



ToDoItem.js
import React from 'react';

// props 6개 - State 4개 + Event 2개
// id, content, isDone, createDate -> Parent Component로부터 내려오는 State
// onUpdate, onDelete -> Parent Component로 보내는 Event
function ToDoItem({id, content, isDone, createDate, onUpdate, onDelete}) {

    //onUpdate : ToDoItem에서 발생되는 Event - CheckBox 선택 & 해제
    const onUpdate = () => 
    {
        onUpdate(id);

    }


    //onDelete : Button click하면 삭제 처리
    const onDelete = () =>
    {
        onDelete(id);
    }


    return (
        <div>
            <div><input type="checkbox" onChange={onUpdate} checked={isDone} /></div>

            <div>{content}</div>

            <div>{new Date(createDate).toLocaleDateString()}</div>

            <div><button onClick={onDelete}>삭제</button></div>
        </div>
    );
}

export default ToDoItem;


============================================================================================================
17:40

ToDoList.js
import React from 'react';
import ToDoItem from './ToDoItem';


//props 3개
//todo = object가 담긴 array : App에서 내려온 것
function ToDoList({todo, onUpdate, onDelete}) {
    return (
        <div>
        {
            todo.map( (it) =>
            {

            <ToDoItem
            //todo안에 담을 것들
            id={it.id} 
            content={it.content} 
            isDone={it.isDone} 
            createDate={it.createDate}

            //Item에서 올라온 것들
            onUpdate={onUpdate} 
            onDelete={onDelete}
            />
            
            })
        }
        </div>
    );
}

export default ToDoList;




App.js - todo 
-> todolist.js - todo.map - ToDoItem 
-> ToDoItem.js



