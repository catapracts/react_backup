어제 했던 내용

util.js
// 함수 : 해당 날짜를 TimesTemp 형식으로 인풋 받아서 해당월의 시작일, 마지막일 리던  
export const getMonthRangeByDate = (date) => {

    //  년 월의 시작 날짜 
    const beginTimeStemp = new Date(
        date.getFullYear(),         // yyyy
        date.getMonth(),            // mm 
        1,                          // 1일 
        0,                          // 0시 
        0,                          // 0분
        0                           // 0초 
    ); 

    //   년 월의 마지막 날짜 
    const endTimeStemp = new Date(
        date.getFullYear(),             // 년도
        date.getMonth() + 1 ,            // 다음달  월 
        0,                               // 0일           
        23,                              // 23시
        59,                              //59분
        59                                //59초 
    ); 

    return { beginTimeStemp, endTimeStemp } ; 
}
추가됨

App.js

    case "DELETE":
      // state.filter(it) 을 돌려서 ation.targetId !== it.id 을 새로운 배열에 담아서 리턴
      // id.id 필드의 자료형(Number), action.targetId 필의 자료형 (String)  
      return state.filter( (it) => String( it.id ) !== String (action.targetId )
      );
    case "UPDATE": 
      return state.map( (it)=> String(it.id) === String(action.data.id) ? 
                      {...action.data}: it ) ; 


  const onUpdate = (id, date, emotionId, content) => {
    console.log (`App 업데이트 날짜 : ${date}`)
    console.log (`포멧 완료된 날짜 : ${new Date(date).getTime()}`)

    dispatch({
      type: "UPDATE", 
      data: {
        id : id, 
        date : new Date(date).getTime(),    // yyyy-mm-dd 형식을 TimesTemp 형식으로 변환 
        emotionId : emotionId, 
        content : content,
      }
    });

  }
  const onDelete = (targetId) => {
     // console.log(`하위에서 삭제 id : ${targetId}`)
    dispatch({
      type:'DELETE',
 //     targetId: targetId,     <== 풀어서 사용함. 
      targetId,                 // 축약 표현 
    } ); 

  }


추가됨


Edit.js
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useContext } from 'react';
import {DiaryDispatchContext, DiaryStateContext} from '../App'; 
import Editor from '../components/Editor';

    // /eidt/:id  <== 파라미터의 id 값을 가져오기 
    const params = useParams();         // params.id
    const {id} = useParams();           // id           <== 구조 분해 할당 : ES6 

    const navigate = useNavigate(); 
    
    // App.js 에서 context 에서 DiaryStateContext로 부터 data <== 배열 [객체, 객체, 객체]
    const data = useContext(DiaryStateContext); 

    //data 배열로 부터 id 값이 들어간 일기를  저장하는 state 
    const [diary, setDiary] = useState(); 

    // useEffect 를 사용해서 Eidi 컴포넌트가 처음 렌더링 될때  작동, 의존성 배열의 state가 수정될때 
        //함수 작동 
    // data 배열의  id 에 해당 하는 읽기 정보를 끄집어 내서 setDiary 를 수정 
        // 의존성 배열 : id, data 의 값이 수정될때 함수가 랜더링 
    useEffect(
        ()=>{
            // setDiary를 사용해서 diary 상태를 변경 , diary : id 값에 해당 하는 일기 
            const matchDiary = data.find( (it) => String (it.id) === String(id)  ); 
            if (matchDiary) {  // data 배열에서 해당 일기가 검색되었을때 
                setDiary(matchDiary); 
            }else { // data 배열에서 값이 검색이 안되었을때 
                window.alert('해당 일기가 존재하지 않습니다. ');  
                navigate('/' , {replace:true}); 
            }


        }, [id, data]
    );


    //useContext 를 사용해서 하위 컴포넌트에서 props 연결없이 바로 호출 해서 사용함. 
    //App.js  :  Context 에서 onUpdate, onDelete 이베트를 가지고 옴  
    const {onUpdate, onDelete} = useContext (DiaryDispatchContext); 

    //뒤로가기 버튼 

    const goBack = () => {
        navigate(-1);
    }
    // 삭제 하기 클릭 : /edit/id 
    //  confirm : 확인(true), 취소 (false)
    const onClickDelete = () => {
      if (
         window.confirm(`정말로 일기를 삭제 하시겠습니까? 일기 번호 : ${params.id}` )
         ){
            // confirm 에서 확인(true) 블락이 실행 
            onDelete(id); 
            //삭제 이후 이동 할 페이지 
            navigate('/', {replace:true})
         }
    }

    const onSubmit = (data) => {
        // 수정한 내용을 처리하는 함수
        if (
             window.confirm (`일기를 정말로 수정 할까요? :  ${data.date}` )
        ){
            // confirm 에서 확인을 클릭시 작동 
            // 구조 분해 할당 , ES6  : 객체의 필드를 변수에 할당. 
            const {date, emotionId, content} = data ;  
            //onUpdte 이벤트에 구조분해 할당한 값을 props로 전달 
            // 수정 페이지 이므로 /edit/:id , id 값도 넘겨 줘야 함. 
            onUpdate( id, date, emotionId, content); 
            //페이지 이동 
            navigate('/', {replace:true}); 

        }
        
    }

            <Header title = "글 수정 하기" 
                leftChild= {<Button text=" < 뒤로가기 " 
                            type="positive" onClick={goBack}  />}
                rightChild= {<Button text=" 삭제 하기 " 
                            type="negative" onClick={onClickDelete}  />}
                />
            <Editor initData= {diary} onSubmit={onSubmit} />

추가됨


Home.js
import { getMonthRangeByDate} from '../utils';
import React, { useState, useContext, useEffect } from 'react';

    //data [{일기1}, {일기2}, {일기3}] 해당월의
    // stat : 월별로 필터링된 일기 배열을 저장 
    const [filteredDate, setfilteredDate] = useState([]); 

    // useEffect 를 사용해서 Home 컴포넌트가 랜더링될때, [data,pivotDate] 가 수정이 될때 함수 랜더링
    useEffect(
        () => {
           if (data.length >= 1 ) {        
            // 현재 년월에 대한 사작일, 종료일을 가지고 옮
            const { beginTimeStemp, endTimeStemp} = getMonthRangeByDate(pivotDate); 

            // data : 전체 읽기에 대한 내용 ===> 해당월의 일기 내용만 필더 해서 새로운 배열에 저장 
            setfilteredDate (
                data.filter(
                    (it) => beginTimeStemp <= it.date && it.date <= endTimeStemp
                ) 
            ); 
           } 
        } , [data, pivotDate]
    ); 

<DiaryList data={filteredDate}/>
추가됨

Editor.js
import React, { useState, useEffect } from 'react';

    // 수정 페이지 : initDate : 수정할 객체가 props를 통해서 넘오옴. 
    // Editor 컴포넌트가 호출 , initData 가 상태가 변경될 때 함수가 작동 
    useEffect(
        () => {
            if (initData){  //initData : 값이 존재할때 , 수정 페이지 
                            // initData 객체의 date 필드의 형식을 : yyyy-mm-dd 
                setState({...initData, date:getFormattedDate(new Date (parseInt(initData.date)))});
            }

        }, [initData]
    );

추가됨

============================================================================================================
09:35

delete logic 생성
최신순, 오래된 순만 작성하면 완료됨


JSX = 화면에 출력하는 부분 - 확장 문법 / view page(HTML, CSS, JavaScript)의 state
router-dom : web개발시 사용
context - 중규모 프로젝트까지 커버 가능

============================================================================================================
10:42 / 11:44 / 12:37


DiaryList.js
import React, { useState, useEffect } from 'react';
import './DiaryList.css';
import Button from './Button';
import DiaryItem from './DiaryItem';
import { useNavigate } from 'react-router-dom';

function DiaryList({data}) {


    //월별로 filter된 일기 객체가 저장된 배열, 날짜별로 정렬X [{일기1},{일기2},...]
    
    const navigate = useNavigate();

    // Select의 Option의 value, name을 저장하는 배열
    const sortOptionList = [{value : "latest", name : "최신순"}, {value : "oldest", name : "오래된순"}];

    // 정렬type 저장 state
    const [sortType, setSortType] = useState("latest");

    // 정렬type에 따라 객체 정렬해서 배열에 저장[{},{},...]
    const [sortData, setSortData] = useState([]);

    // sortOptionList -> onChangeSortType ->
    const onChangeSortType = (e) => 
    {
        setSortType(e.target.value); //sortOptionList에서 하나 들어온다.
        console.log(e.target.value);
    }

    //useEffect : sortType에 따라 sort data를 수정하는 hook - state 변경된 이후 다른 작업 자동 처리
    //DiaryList 처음 rendering시, 의존성 배열값이 수정될 때, 함수 작동
    useEffect(
        () => {
            //input으로 받은 객체의 날짜를 비교해서 return
            const compare = (a,b) => {
                if(sortType === "latest")
                {
                    return Number(b.date) - Number(a.date); // 최신 순으로 정렬 후 return
                }

                else
                {
                    return Number(a.date) - Number(b.date); // 오래된 순으로 정렬 후 return
                }
            }
            
            //compare함수의 인자로 값을 정렬해서 원본 일기 저장하는 배열의 값을 JSON형식으로 저장 후, 자바의 객체로 변환
            //JSON.stringify(JS객체) : JS객체를 JSON형식으로 변환하는 method(직렬화) / 객체 = memory에 있는 값 = 얘 자체만으로는 네트워크를 통해서 전송 불가능 -> 네트워크를 통해서 전송가능하도록 형식을 변환해야함
            //JSON.parse(JSON파일) : JSON파일을 JS객체로 변환하는 method(역직렬화) / 네트워크를 통해서 들어온 JSON파일을 RAM에서 사용가능한 형태로 변환
            //직렬화 - Memory(RAM)에 있는 객체를 네트워크를 통해서 전송가능하도록 형식을 변환하는 행위 / JS객체 = 해당 System에서만 사용 가능
            const copyList = JSON.parse(JSON.stringify(data));

            //copyList에 정렬된 배열의 객체가 정렬되어서 들어간다.
            copyList.sort(compare);

            //setSortData에 copyList를 넣기
            setSortData(copyList);

        },
        [data, sortType]
    );


    return (
        <div className="DiaryList">

            <div className="menu_wrapper">

                <div className="left_col">
                    <select value={sortType} onChange={onChangeSortType}>
                        { 
                            sortOptionList.map((it,idx) => ( //it = object, idx= index
                                    <option key={idx} value={it.value}>{it.name}</option>
                                )
                            )
                        }
                    </select>
                </div>

                <div className="right_col">
                    <Button text={"새 글쓰기"} type={"positive"} onClick={()=>{navigate('/new')}}/>
                </div>

            </div>

            <div className="list_wrapper">
                {
                    sortData.map((it) => <DiaryItem key={it.id} {...it} />)
                }
            </div>

        </div>
    );
}

export default DiaryList;







App.js
import './App.css';
import { Routes, Route, Link, useNavigate } from 'react-router-dom';
import Header from './include/Header';
import Footer from './include/Footer';
import Home from './pages/Home';
import New from './pages/New';
import Diary from './pages/Diary';
import Edit from './pages/Edit';
import ButtonTest from './test/ButtonTest';
import ImgTest from './test/ImgTest';
import React, {useReducer, useEffect, useRef} from 'react';


const mockData = [
  {id:"0", date:new Date().getTime()-1, content:"mock1", emotionId:1},
  {id:"1", date:new Date().getTime()-2, content:"mock2", emotionId:2},
  {id:"2", date:new Date().getTime()-3, content:"mock3", emotionId:3}
];





export const DiaryStateContext = React.createContext();
export const DiaryDispatchContext = React.createContext();


function reducer(state, action)
{
  switch(action.type)
  {
    case "INIT" : return action.data;
    case "CREATE" : return [action.data, ...state];
    case "UPDATE" : return state.map( (it)=> String(it.id) === String(action.data.id) ? {...action.data}: it ) ;
    case "DELETE" : return state.filter( (it) => String( it.id ) !== String (action.targetId ));
  }
}


function App() {

  const [data, dispatch] = useReducer(reducer, []);
  
  //useRef(Hook) 사용해서 고유 value 생성 후 id(mockData의 id)에 적용
  const idRef = useRef(3); // 새로 생성시 4번부터 시작


  useEffect( () => {dispatch({type: "INIT", data : mockData});} ,[]);


  // 하위 Component에서 요청한 Event 처리하는 함수들
// date : yyyy-mm-dd : TimeStamp형식의 날짜로 변환
const onCreate = (date, content, emotionId) => 
{
  dispatch({
    type: "CREATE",
    data: 
    {
      id: idRef.current++, 
      date: new Date(date).getTime(), 
      content:content,
       emotionId: emotionId}
  });
}

const onUpdate = (id, date, emotionId, content) => 
{
  console.log (`App 업데이트 날짜 : ${date}`)
  console.log (`포멧 완료된 날짜 : ${new Date(date).getTime()}`)
  dispatch({
    type: "UPDATE", 
    data: { id : id, date : new Date(date).getTime(), emotionId : emotionId, content : content,}
  });
}

const onDelete = (targetId) => 
{
  console.log(`하위에서 삭제 id : ${targetId}`)
  dispatch({
    type:'DELETE', targetId,
  } ); 
}

  return (
    <DiaryStateContext.Provider value={data}>
      <DiaryDispatchContext.Provider value={{onCreate, onUpdate, onDelete}}>


    <div className="App">
      <h1>Diary App</h1>
 
      <Header />
      <hr />
      <p /><p /><p /><p />

        <Routes>
          <Route path="/" element={<Home />}></Route>
          <Route path="/new" element={<New />}></Route>
          <Route path="/diary/:id" element={<Diary />}></Route>
          <Route path="/edit/:id" element={<Edit />}></Route>


          <Route path="/btnTest" element={<ButtonTest />}></Route>
          <Route path="/imgTest" element={<ImgTest />}></Route>
        </Routes>

      <p /><p /><p /><p />
      <hr />
      <Footer />
      
    </div>



    </DiaryDispatchContext.Provider>
    </DiaryStateContext.Provider>
  );
}

export default App;







Home.js
import React, { useState, useContext, useEffect } from 'react';
import Button from '../components/Button';
import Header from '../components/Header';
import DiaryList from '../components/DiaryList';
import {DiaryStateContext} from '../App';
import { getMonthRangeByDate} from '../util';

function Home(props) {

    const data = useContext(DiaryStateContext);

    const [pivotDate, setPivotDate] = useState(new Date());

    const [filteredDate, setfilteredDate] = useState([]); 


    useEffect(
        () => {
           if (data.length >= 1 ) {        

            const { beginTimeStemp, endTimeStemp} = getMonthRangeByDate(pivotDate); 


            setfilteredDate (
                data.filter(
                    (it) => beginTimeStemp <= it.date && it.date <= endTimeStemp
                ) 
            ); 
           } 
        } , [data, pivotDate]
    ); 


    const headerTitle = `${pivotDate.getFullYear()}년 ${pivotDate.getMonth()+1}월`

    const onDecreaseMonth = () => 
    {
        setPivotDate(new Date(pivotDate.getFullYear(), pivotDate.getMonth()-1) )
    }

    const onIncreaseMonth = () => 
    {
        setPivotDate(new Date(pivotDate.getFullYear(), pivotDate.getMonth()+1) )
    }

    return (
        <div>
            <Header
            title= {headerTitle}
            leftChild={<Button text={"<"} type="positive" onClick={onDecreaseMonth}/>} 
            rightChild={<Button text={">"} type="negative" onClick={onIncreaseMonth}/>}
            />

            <DiaryList data={filteredDate}/>
        </div>
        
    );
}

export default Home;

DiaryItem.js
import React from 'react';
import './DiaryItem.css';
import Button from './Button';
import { getEmotionImgById } from '../util';
import { useNavigate } from 'react-router-dom';

function DiaryItem({id, emotionId, content, date}) {

    const navigate = useNavigate();


    const onDetail = () => 
    {
        navigate(`/diary/${id}`);
    }


    const goEdit = () => 
    {
        navigate(`/edit/${id}`);
    }


    return (
        <div className = "DiaryItem">
            
            <div className = {['img_section', `img_section_${emotionId}`].join(" ")  }>
                <img src={getEmotionImgById(emotionId)} alt={`emotion${emotionId}`} />
            </div>


            <div onClick={onDetail} className = "info_section">
                <div className = "date_wrapper">{new Date(parseInt(date)).toLocaleDateString()}</div>

                <div className = "content_wrapper">{content.slice(0,25)}</div>
            </div>

            <div className = "button_section">
                <Button text={"수정하기"} type={"default"} onClick={goEdit} />
            </div>
        </div>
    );
}

export default DiaryItem;
============================================================================================================
14:39

★★★★★Context(중소규모), Redux(대규모), Mobx - component사이 data(State, Event) 전달 with Provider
Router


高																			低
index.js - App.js - Pages폴더에 위치한 Component들(Home.js, New.js, Diary.js, Edit.js), includes폴더에 위치한 Component들(Header.js, Footer.js) - Components폴더에 위치한 component들


index.js에서 BrowserRouter로 Rendering / Routes안에는 Route만 들어간다
pages안에 있는 component들은 component폴더에 있는 애들 가져와서 사용한다.
객체 = memory에서 작동

============================================================================================================
15:37, 16:31

Spring에서 WorkSpace 열 때, Employee_Manage_App_FE_BE-REST-API선택
import project - Gradle - Existing Gradle Project(환경 따라 import 선택) - Employee_Manage_App_FE_BE-REST-API/Springboot-BackEnd 이거 선택 - Next로 진행 - Finish
JPA, MySQL이용한 SpringBoot - DB만들어야한다. create database restlab; use restlab;
react-router-dom, axios, boot-strap설치된 상태

ListEmployeeComponent.js = 배열 하나에 객체

EmployeeService - axios import한 상태 / method 이용해서 API요청할 주소 처리

postman = Server/Client 사이에 restAPI로 어떤 data 요청, 받아오는 건 잘 되는지 확인하는 용도

JSON
F12 - network tab : client에서 request, reply하는 data확인 가능 / 금지마크 누르면 기호 다 날아간다.
GET Request
Client : React

EmployeeController.java
@RestController -> 요청한 주소에 대해 Client로 return되는 모든 data의 형태는 JSON으로 변경된다.
원래는 Controller Class위에 @Controller(백엔드에서 처리후 view page를 return)만 붙임
그런데 @RestController이거 붙이면 JSON형태로  Return한다.

@Controller 
- @GetMapping, @PostMapping 2개의 요청만 받는다
- 백엔드 logic 처리 후 view page return
- MPA = Server side Rendering

@RestController
- JSON으로 값을 Client에게 전달 - Client에서 rendering / Client에게서 JSON으로 값을 받고 DB에 저장
- @GetMapping : DB의 값을 Select 
- @PostMapping : Client에서 넘겨받은 값을 DB에 insert
- @PutMapping  : DB의 값 update
- @DeleteMapping : DB에 값 delete
- RestAPI통신

@CrossOrigin("*") : CORS setting

@RequestMapping("~/~") : @RequestMapping하위 요청에 상속됨(@RestController밑에다 명시하면)

============================================================================================================
17:38

employee객체를 list에 담아서 전달
get = select, 
post = insert, 
patch = update, column 중 일부분만 수정
put = update, column 전부 수정, 
delete = delete

객체랑 JSON의 형태는 동일함 but 객체 = memory에서 사용

App.js
<Route path = "/" element = { <ListEmployeeComponent />}></Route>

ListEmployeeComponent.js
set함수 통해 들어오고, 처리
서버에게 요청할 주소
getAllEmployees() -> axios에 요청 보낸것
employee : 객체 꺼낸 것

서버에게 비동기 통신하는 여러가지 방법 by HTTP method(GET, POST, PUSH, PATCH, DELETE)
1. XMLHTTPRequest : 초창기 사용, 사용 구문 복잡
2. fetch : JS를 기본 내장, Library 설치 없이 사용 가능
3. AJAX : JQuery Library 등록 - MPA(Server Side Rendering)
4. axios : React에서 많이 사용 / Library 따로 설치 필요 - npm install axios, yarn add axios
5. JSON

EmployeeService.js
주소에 대해 요청 정보를 하나에다 모아놓으면 편하다.
new 써서 객체화시킨 후 export -> 호출만 하면 자동 사용 가능

