09:35

Http Request Method : GET, POST, PUT(전체 field 수정), PATCH(특정 field 수정), DELETE
Http Response Status : 200, 400, 404, 405, 500

Ajax는 변수 타입 따로 지정 안 하면 Param으로 - MPA
Axios는 변수 타입 따로 지정 안 하면 JSON으로 - SPA

XML -> JSON

JSON.Stringify() -> JSON파일로 변환
plain text = 암호화 안 한 파일




============================================================================================================
10:33


@ResponseBody
@ResponseEntity

javax : SpringBoot v2.X
jakarta : SpringBoot v3.X

호출 : Controller
제어 : Repository
Service : 보안, 중복code방지, 모듈화(method)
Controller -> Service -> Repository
DI(Dependency Injection) = Spring Framework에 object injection

============================================================================================================
11:42 12:42

Client - MovieDTO - Movie(Entity) - Movie Repository - DB

MovieDTO의 모든 field값을 Movie Entity에 injection

modelMapper - modelMapper Library가 build.gradle에 등록되어 있어야 함 / 대량 column처리

window.location.href='/';

============================================================================================================
14:33, 15:44

movie_lab.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Movie-LAB</title>
<script src="https://code.jquery.com/jquery-3.6.4.min.js">
</script> 
</head>
<body>
	<h1>Ajax - Movie-LAB (영화 json 데이터 서버의 DB에 입력)</h1>
	<button onclick="ajaxLab2Fn()">ajaxLab2 함수 호출 하기</button>
	<button onclick="ajaxSaveFn()">데이터 DB에 저장</button>
	<button onclick="ajaxGETFn()">Server의 GET요청으로 DB값 console에 출력</button>
			
</body>

<script type="text/javascript">

	const params = {
		"backdrop_path": "https://image.tmdb.org/t/p/w1280/r7Dfg9aRZ78gJsmDlCirIIlNH3d.jpg",
		"id_num": 785084,
		"original_language": "en",
		"original_title": "The Whale",
		"overview": "272kg의 거구로 세상을 거부한 채 살아가는 대학 강사 찰리는 남은 시간이 얼마 없음을 느끼고 오랫동안 만나지 못한 10대 딸 엘리를 집으로 초대한다. 그리고, 매일 자신을 찾아와 에세이 한 편을 완성하면 전 재산을 주겠다고 제안한다.",
		"poster_path": "https://image.tmdb.org/t/p/w1280/q0xV5Lnq30JiegbVGBOvVwrgUDT.jpg",
		"release_date": "2023-03-01",
		"title": "더 웨일",
		"vote_count": 1165}
	
	// GET, movie 테이블 전체 List 가져오기, 성공 이후 res값으로 Logic 처리, 실패 시 ree로 error code 띄우기
	const ajaxGETFn = () =>
	{
		$.ajax({
			type : "GET",
			url : "http://localhost:9696/get",
			success:function(res)
			{ 
				console.log("GET으로 가져오기 성공", res);
				
			},
			error:function(err)
			{
				console.log("GET으로 가져오기 실패 : ",err);
			}	
		})
	}


	const ajaxLab2Fn = () => 
	{
		$.ajax ({
			type:"post",
			url:"/movie/post",
						// parameter 값을 서버로 전송 할때, JavaScript 객체로 전송하는 것이 아니라 JSON 형식으로 전송했을때는 
			// 서버에서 @RequestBody 어노테이션으로 받아야 한다. 
			// data를 서버로 전송할때 JSON 형식이라고 선언후 전송 
			data:JSON.stringify(params),			//변수를 서버로 전송시 JSON선언후 전송 
			contentType:"application/json",
						//요청이 성공했을때 실행되는 부분 
			success:function(res){			//res <== 서버에서 리턴받은 DTO 
				console.log("성공", res)	
			//	console.log("param1 의 값 : ", res.title)
			//	console.log("param2 의 값 : ", res.poster_path)
			},
						//요청이 실패 했을때 실행되는 블락 (예외 처리 )
			error:function(){
				console.log("실패 ")
			}			
		})
	}
	
	const ajaxSaveFn = () =>
	{
		$.ajax({
			type : "post",
			url : "movie/create",
			contentType : "application/json",
			data : JSON.stringify(params),
			success : function(res)
			{
				console.log("create완료", res)
			},		
			error : function()
			{
				console.log("create실패")
			}
			
		})
	}

</script>
</body>
</html>





MovieDTO.java
package com.example.AjaxEX.dto;

import lombok.ToString;

import org.modelmapper.ModelMapper;

import com.example.AjaxEX.entity.Movie;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@ToString
@NoArgsConstructor
public class MovieDTO 
{
	// FE (JSON) ===> Controller ===> MovieDTO ===> MovieService ==> Movie Repository => DB 
	

	private String backdrop_path; 
	private Long id_num ; 
	private String original_language; 
	private String original_title;
	private String overview ; 
	private String poster_path; 
	private String release_date; 
	private String title; 
	private Long vote_count; 
	
    private static ModelMapper modelMapper = new ModelMapper();

    //Client form 에서 넘어오는 값을 DTO에 담아서 Movie Entity 클래스에 적용후 DB에 저장  
    public Movie createMovie()
    {
        return modelMapper.map(this, Movie.class);
    }
    
    //DB에서 가져온 Movie Entity 클래스를 DTO 에 주입해서 client 로 전송 하기 위한 매핑 
    public static MovieDTO of(Movie movie) 
    {
        return modelMapper.map(movie,MovieDTO.class);
    }
}





MovieService.java
package com.example.AjaxEX.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.example.AjaxEX.dto.MovieDTO;
import com.example.AjaxEX.entity.Movie;
import com.example.AjaxEX.repository.MovieRepository;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class MovieService 
{
	private final MovieRepository movieRepository;
	
	public void create(Movie movie)
	{
		Movie m = new Movie();
		m.setBackdrop_path(movie.getBackdrop_path());
		m.setId_num(movie.getId_num());
		m.setOriginal_language(movie.getOriginal_language());
		m.setOriginal_title(movie.getOriginal_title());
		m.setOverview(movie.getOverview());
		m.setPoster_path(movie.getPoster_path());
		m.setRelease_date(movie.getRelease_date());
		m.setTitle(movie.getTitle());
		m.setVote_count(movie.getVote_count());
		movieRepository.save(m);
	}
	
	
	public void modify()
	{
		
	}
	
	
	public void delete(Movie m)
	{
		movieRepository.delete(m);
	}

	
	public List<Movie> listAll()
	{
		return movieRepository.findAll();
	}
	
	//DB Movie table의 모든 record를 List<Movie>로 가지고 와서 List<MovieDTO>에 넣고 return
	// Entity -> DTO로 변환 후 return
	public List<MovieDTO> getGetListAll()
	{
		List<MovieDTO> movieDTO = new ArrayList<>();
		
		List<Movie> movieList = movieRepository.findAll();
		
		for(int i = 0; i < movieList.size(); i++)
		{
			Movie movie = movieList.get(i);
			MovieDTO m = new MovieDTO();
			m = m.of(movie);
			movieDTO.add(m);
		}

		
		return movieDTO;
		
		
		// movieList = movieDTO하면 Error 뜬다.
		//출력 확인용 주석
//		for(int i = 0; i < movieList.size(); i++)
//		{
//			Movie movie = movieList.get(i);
//			System.out.println("=========="+i+"==========");
//			System.out.println(movie.getTitle());
//			System.out.println("=========================");
//		}
		
		
	}

	
	public String movieInsert (MovieDTO movieDTO) 
	{
		
		// MovieDTO : Client  <===> MovieDTO <===> Movie  (Entity) ==. MovieRepository ==> DB 
		
		// movieDTO의 모든 필드의 값을 Movie (Entiy) 로 주입 
		Movie movie = movieDTO.createMovie(); 
		
		System.out.println("===Movie (Entity 의 값을 출력 ) ====");
		System.out.println(movie.getTitle());
		System.out.println(movie.getPoster_path());
		System.out.println(movie.getRelease_date());
		System.out.println(movie.getVote_count());
		System.out.println("===Movie (Entity 의 값을 출력 ) ====");
		
		movieRepository.save(movie); 
		
		return "insert 성공됨 !!!!" ; 
	}
}



MovieController.java
package com.example.AjaxEX.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.AjaxEX.dto.MovieDTO;
import com.example.AjaxEX.entity.Movie;
import com.example.AjaxEX.service.MovieService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Controller
public class MovieController 
{
	// DI 객체 주입 : @RequiredArgsConstructor 
	private final MovieService movieService;
	
	@PostMapping("/movie/post")
	public @ResponseBody Movie ex07(@RequestBody Movie movie)
	{
		System.out.println("movie-lab request success");
		System.out.println("param1의 값 : " + movie.getBackdrop_path());
		System.out.println("param2의 값 : " + movie.getId_num());
		System.out.println("param3의 값 : " + movie.getOriginal_language());
		System.out.println("param4의 값 : " + movie.getOriginal_title());
		System.out.println("param5의 값 : " + movie.getOverview());
		System.out.println("param6의 값 : " + movie.getPoster_path());
		System.out.println("param7의 값 : " + movie.getRelease_date());
		System.out.println("param8의 값 : " + movie.getTitle());
		System.out.println("param9의 값 : " + movie.getVote_count());
		
		return movie;
	}
	
	@PostMapping("movie/create")
	public @ResponseBody Movie create(@RequestBody Movie movie)
	{
		System.out.println("movie_lab request create");
		movieService.create(movie);
		return movie;
	}
	
	//GET방식, Movie table 전체 내용 가져오기
	@GetMapping("/get")
	public ResponseEntity<List<MovieDTO>> getGetAll()
	{
		List<MovieDTO> movieList = movieService.getGetListAll();
		
		System.out.println("GET으로 Movie 가져오기");
		
		return new ResponseEntity<>( movieList , HttpStatus.OK);
	} 
	
	// Movie 의 POST 요청을 처리하는 메소드 : insert 
	@PostMapping("/movie") 
	public ResponseEntity<String> movieInsert(
			// cliet 에서 던지는 객체를 자바에서 input 
			@RequestBody MovieDTO movieDTO 
			) {
		System.out.println("=====================");
		System.out.println(movieDTO.getBackdrop_path());
		System.out.println(movieDTO.getOriginal_language());
		System.out.println(movieDTO.getTitle());
		System.out.println(movieDTO.getPoster_path());
		System.out.println("=====================");
		
		
		String complate = movieService.movieInsert(movieDTO) ; 
		
		return new ResponseEntity<String>( complate , HttpStatus.OK);
	}
	
}






============================================================================================================
16:35 17:38

*Insert, Update, Delete return 있어도 되고 없어도 된다.




movie_lab.html









MovieService.java













MovieController.java





